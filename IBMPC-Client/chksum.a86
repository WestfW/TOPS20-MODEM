| call CHKSUM( a$, Result%).textcrc:	push	bp	mov	bp,sp	mov	si,8(bp)	| address of string descriptor	mov	cl,(si)		| length of the string	mov	ch,#0	mov	si,1(si)	| address of string	xor	bx,bx		| set crc to 0	jcxz	crcendcrclp:	lodb			| get byte	push	cx	mov	cl,#8		| do crc for 8 bitsbitlp:	rol	al,#1	rcl	bx,#1		| rotate bit from character into crc	jnb	skipit	xor	bx,#010041skipit:	loop	bitlp	pop	cx	loop	lp		| computer the checksumcrcend:	mov	si,6(bp)	| address of result	mov	(si),bx		| store the checksum	pop	bp	.byte	0xCA,4		| (ret 4) return to basicchksum:	push	bp	mov	bp,sp	mov	si,8(bp)	| address of string descriptor	mov	cl,(si)		| length of the string	mov	ch,#0	mov	si,1(si)	| address of string	xor	ax,ax	jcxz	enditlp:	add	al,(si)	inc	si	loop	lp		| compute the checksumendit:	mov	si,6(bp)	| address of result	mov	(si),ax		| store the checksum	pop	bp	.byte	0xCA,4		| (ret 4) return to basic	